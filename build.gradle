import com.github.spotbugs.snom.Confidence

plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    alias libs.plugins.spotbugs
    alias libs.plugins.spotless
    alias libs.plugins.nexus.publish
}

version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(libs.junit4)
    testImplementation(libs.assertj)
    testImplementation(libs.commons.io)
    testImplementation(libs.commons.compress)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.ADOPTIUM
    }
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    failOnError = false
    options {
        jFlags('-Duser.language=en')
        addStringOption('locale', 'en_US')
        addStringOption('bottom', '<span>Copyright 2000-2023, OmegaT project and contributors</span>')
        addStringOption('encoding', 'UTF-8')
        addBooleanOption("Xdoclint:none", true)
        addBooleanOption('html5', true)
        addBooleanOption('frames', false)
        addBooleanOption('public', true)
    }
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll '-Xlint', '-Werror'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.omegat'
            artifactId 'jmyspell-core'
            from components.java
            pom {
                name.set("jmyspell-core")
                description.set("JMySpell is a spell-checker for Java applications, capable \n" +
                        "of seamlessly incorporating the existing OpenOffice.org \n" +
                        "dictionaries. Based on MySpell (but written in 100% Java.)\n")
                url.set("https://github.com/omegat-org/jmyspell-core")
                licenses {
                    license {
                        name.set("GNU Lesser Public License v2.1")
                        url.set("https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/omegat-org/jmyspell-core.git")
                    developerConnection.set("scm:git:git://github.com/omegat-org/jmyspell-core.git")
                }
                developers {
                    developer {
                        id.set("miurahr")
                        name.set("Hiroshi Miura")
                        email.set("miurahr@linux.com")
                    }
                }
            }
        }
    }
}

signing {
    if (project.hasProperty("signingKey")) {
        def signingKey = findProperty("signingKey").toString()
        def signingPassword = findProperty("signingPassword").toString()
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        useGpgCmd()
    }
    sign publishing.publications.mavenJava
}

tasks.withType(Sign).configureEach {
    def hasKey = project.hasProperty("signingKey") || project.hasProperty("signing.gnupg.keyName")
    onlyIf { hasKey && !project.version.toString().endsWith("-SNAPSHOT")}
}

nexusPublishing.repositories {
    sonatype {
        username = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : System.getenv('SONATYPE_USER')
        password = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : System.getenv('SONATYPE_PASS')
    }
}

spotbugs {
    reportLevel = Confidence.valueOf('HIGH')
    tasks.spotbugsMain {
        reports {
            html.required = true
        }
    }
    tasks.spotbugsTest {
        reports {
            html.required = true
        }
    }
}

spotless {
    enforceCheck false
    java {
        removeUnusedImports()
    }
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    group = 'verification'
    reports {
        html.required = true
    }
}
